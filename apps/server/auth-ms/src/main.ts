/**
 * This is not a production server yet!
 * This is only a minimal backend to get started.
 */

import { Logger } from '@nestjs/common';
import { NestFactory } from '@nestjs/core';
import { Transport } from '@nestjs/microservices';
import { AuthMs, GrpcExceptionFilter } from '@nx-mfe/server/grpc';

import { AppModule } from './app/app.module';

async function bootstrap() {
  const PORT = process.env.PORT || 3001;

  const microservice = await NestFactory.createMicroservice(AppModule, {
    transport: Transport.GRPC,
    options: {
      url: `0.0.0.0:${PORT}`,
      package: AuthMs.protobufPackage,
      // TODO –º–æ–Ω–∂–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ npm –ø–∞–∫–µ—Ç,
      // –Ω–æ —Ç–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç—Å—è –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏,
      // –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Ç–∞–∫–æ–π –ø—É—Ç—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      // protoPath: path.resolve(__dirname, 'libs/server/grpc/src/lib/auth-ms.proto'),
      protoPath: 'libs/server/grpc/src/lib/proto/auth-ms.proto',
    },
  });

  microservice.useGlobalFilters(new GrpcExceptionFilter());

  await microservice.listen();

  Logger.log(`üöÄ Auth microservice is running on: 0.0.0.0:${PORT}`);
}

bootstrap();
